<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>查找问题</title>
    <link href="/2022/03/09/%E6%9F%A5%E6%89%BE%E9%97%AE%E9%A2%98/"/>
    <url>/2022/03/09/%E6%9F%A5%E6%89%BE%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面">写在前面</h1><p>  LeetCode中的一些查找类型的题目。</p><h1 id="双指针">双指针</h1><p>  显然，用一个指针可以遍历线性表。但是为了解决一些问题，有时候可以考虑「双指针」，代码的实现更高效。</p><h2 id="题目1">题目1</h2><p>题目来源：<a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/">Leetcode-167.Two Sum II - Input array is sorted</a></p><p><strong>Amazon</strong></p><p>题目难度：<strong>Easy</strong></p><p>题目描述：Given an array of integers that is already <strong><em>sorted in ascending order</em></strong>, find two numbers such that they add up to a specific target number.</p><p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.</p><p><strong>Note:</strong></p><ul><li>Your returned answers (both index1 and index2) are not zero-based.</li><li>You may assume that each input would have <em>exactly</em> one solution and you may not use the <em>same</em> element twice.</li></ul><p>题目大意：给定有序数组numbers[]和整数target，在numbers[]中寻找两个数使其和为target，并返回这两个数的索引。</p><p>样例：</p><p><strong>Input:</strong> numbers = [2,7,11,15], target = 9 <strong>Output:</strong> [1,2] <strong>Explanation:</strong> The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.</p><h3 id="暴力解法">暴力解法</h3><p>实在想不出更高效的解法时，可以考虑暴力解法。其实很多优化也是从暴力开始进行的。</p><p>时间复杂度为O(n^2)，Leetcode提交超时。</p><h3 id="双指针-1">双指针</h3><p>由于这是一个有序数组，所以可以使用两个指针index1和index2，一首一尾，根据此时指向元素的求和情况改变指针的指向。若numbers[index1] + numbers[index2] &lt; target，则index1++；大于则index2--；等于则有解。当index1与index2相遇时仍没有解则无解。</p><p>需要注意的问题：不能返回相同的索引；要处理没有解的情况；若多解该如何处理？</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// time:O(n)</span><br><span class="hljs-comment">// memory:O(1)</span><br><span class="hljs-comment">// 充分利用numbers[]有序的特征</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; numbers, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; vt;<br>        <span class="hljs-keyword">int</span> index1 = <span class="hljs-number">0</span>,index2 = numbers.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(index1 &lt; index2)&#123;<br>            <span class="hljs-keyword">if</span>(numbers[index1] + numbers[index2] == target)&#123;<br>                vt.<span class="hljs-built_in">push_back</span>(index1 + <span class="hljs-number">1</span>);<br>                vt.<span class="hljs-built_in">push_back</span>(index2 + <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(numbers[index1] + numbers[index2] &gt; target)&#123;<br>                -- index2;<br>            &#125;<br>            <span class="hljs-keyword">else</span> ++ index1;<br>        &#125;<br>        <span class="hljs-keyword">return</span> vt;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="相关训练">相关训练</h3><p><a href="https://leetcode.com/problems/valid-palindrome/">Leetcode-125.Valid Palindrome</a></p><p><strong>Facebook</strong>；<strong>Microsoft</strong>；<strong>Uber</strong>；<strong>Zenefits</strong></p><p>题目难度：<strong>Easy</strong></p><p><a href="https://github.com/yangyangu/MyLeetCode/blob/master/125-valid-palindrome/valid-palindrome.cpp">Solution-C++</a></p><p>Note：空字符串？字符的定义？大小写。</p><hr /><p><a href="https://leetcode.com/problems/reverse-string/">Leetcode-344.Reverse String</a></p><p>题目难度：<strong>Easy</strong></p><p><a href="https://github.com/yangyangu/MyLeetCode/blob/master/344-reverse-string/reverse-string.cpp">Solution-C++</a></p><p>Note：可以考虑用双指针解法。</p><hr /><p><a href="https://leetcode.com/problems/reverse-vowels-of-a-string/">Leetcode-345.Reverse Vowels of a String</a></p><p><strong>Google</strong></p><p>题目难度：<strong>Easy</strong></p><p><a href="https://github.com/yangyangu/MyLeetCode/blob/master/345-reverse-vowels-of-a-string/reverse-vowels-of-a-string.java">Solution-Java</a></p><hr /><p><a href="https://leetcode.com/problems/container-with-most-water/">Leetcode-11.Container With Most Water</a></p><p><strong>Bloomberg</strong></p><p>题目难度：<strong>Medium</strong></p><p><a href="https://github.com/yangyangu/MyLeetCode/blob/master/011-container-with-most-water/container-with-most-water.cpp">Solution-C++</a></p><h2 id="题目2">题目2</h2><p>题目来源：<a href="https://leetcode.com/problems/two-sum/">Leetcode-1. Two Sum</a></p><p><strong>Facebook</strong>；<strong>Uber</strong>；<strong>Linkedin</strong>；<strong>Apple</strong>；<strong>Amazon</strong>；<strong>Microsoft</strong>；</p><p><strong>Yahoo</strong>；<strong>Yelp</strong>；<strong>Airbnb</strong>；<strong>Dropbox</strong>；<strong>Bloomberg</strong>；<strong>Adobe</strong></p><p>题目难度：<strong>Easy</strong></p><p>题目描述：Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have <strong><em>exactly</em></strong> one solution, and you may not use the <em>same</em>element twice.</p><p>样例：</p><p>Given nums = [2, 7, 11, 15], target = 9,</p><p>Because nums[<strong>0</strong>] + nums[<strong>1</strong>] = 2 + 7 = 9, return [<strong>0</strong>, <strong>1</strong>].</p><h3 id="暴力解法-1">暴力解法</h3><p>双重循环，时间复杂度为O(n^2)。提交超时。</p><h3 id="排序双索引对撞">排序+双索引对撞</h3><p>先对数组nums按照索引进行排序，然后使用「双指针」。</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// time: O(nlogn)</span><br><span class="hljs-comment">// memory: O(n)</span><br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; p1, <span class="hljs-keyword">const</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; p2)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> p1.second &lt; p2.second;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        vector&lt;pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;&gt; vec;<br>        <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++ i)&#123;<br>            vec.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(i, nums[i]));<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>(), cmp);<br>        <span class="hljs-keyword">int</span> idx1 = <span class="hljs-number">0</span>, idx2 = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(idx1 &lt; idx2)&#123;<br>            <span class="hljs-keyword">if</span>(vec[idx1].second + vec[idx2].second == target)&#123;<br>                res[<span class="hljs-number">0</span>] = vec[idx1].first;<br>                res[<span class="hljs-number">1</span>] = vec[idx2].first;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(vec[idx1].second + vec[idx2].second &gt; target)<br>                -- idx2;<br>            <span class="hljs-keyword">else</span><br>                ++ idx1;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="二分查找">二分查找</h1><p>刚才的题目Leetcode-167，由于给定的数组是有序的，所以可以用二分查找解决。</p><h2 id="代码-1">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// time: O(nlogn)</span><br><span class="hljs-comment">// memory: O(1)</span><br><span class="hljs-comment">// 利用有序特征</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">// 二分查找</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp; nums, <span class="hljs-keyword">int</span> lt, <span class="hljs-keyword">int</span> gt, <span class="hljs-keyword">int</span> t)</span></span>&#123;<br>        <span class="hljs-keyword">while</span>(lt &lt;= gt)&#123;<br>            <span class="hljs-keyword">int</span> mid = lt + (gt - lt) / <span class="hljs-number">2</span>; <span class="hljs-comment">// 防止溢出</span><br>            <span class="hljs-keyword">if</span>(nums[mid] &lt; t)&#123;<br>                lt = mid + <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid] &gt; t)&#123;<br>                gt = mid - <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; numbers, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>        <span class="hljs-keyword">int</span> n = numbers.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; ++ i)&#123;<br>            <span class="hljs-comment">// 查找numbers[j] == target - numbers[i]</span><br>            <span class="hljs-keyword">int</span> j = <span class="hljs-built_in">binarySearch</span>(numbers, i + <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>, target - numbers[i]);<br>            <span class="hljs-keyword">if</span>(j != <span class="hljs-number">-1</span>)&#123;<br>                res.<span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">1</span>);<br>                res.<span class="hljs-built_in">push_back</span>(j + <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">return</span> res;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="关于二分查找其他模板">关于二分查找其他模板</h2><p>给定有序数组nums[N], 大小为n，数组下标从1开始，数组元素按照非降序排序。数组中有重复元素。</p><h3 id="查找元素为x的下标">查找元素为x的下标</h3><p>多解的情况返回一个即可。查找不到返回-1。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">binary_search</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;arr, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r = n;<br>    <span class="hljs-keyword">while</span>(l &lt;= r)&#123;<br>        <span class="hljs-keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(arr[mid] == x)&#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[mid] &gt; x)&#123;<br>            l = mid - <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            r = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="查找大于等于x的第一个元素的下标">查找大于等于x的第一个元素的下标</h3><p>条件同上，不存在返回-1。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lower_bound</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;arr, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r = n;<br>    <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>        <span class="hljs-keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(arr[mid] &gt;= x)&#123;<br>            r = mid;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr[l] == x ? l : <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="查找大于x的第一个元素的下标">查找大于x的第一个元素的下标</h3><p>条件同上，不存在返回-1。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">upper_bound</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;arr, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function">    <span class="hljs-keyword">int</span> l </span>= <span class="hljs-number">1</span>, r = n;<br>    <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>        <span class="hljs-keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(arr[mid] &gt; x)&#123;<br>            r = mid;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr[l] &gt; x ? l : <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="哈希表">哈希表</h1><p>C++的STL中的<em>unordered_map</em>底层实现是哈希表。（<del>当然自己手搓一个也可以</del>）</p><h2 id="题目1-1">题目1</h2><p><a href="https://leetcode.com/problems/two-sum/">Leetcode-1. Two Sum</a>。</p><p>将nums放入<strong>unordered_map</strong>中，对每一个元素nums[i]，查找target-nums[i]是否存在。</p><h3 id="代码-2">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// time: O(n)</span><br><span class="hljs-comment">// memory: O(n)</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; m;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt;res;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; nums.<span class="hljs-built_in">size</span>();++ i)&#123;<br>            m[nums[i]] = i;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; nums.<span class="hljs-built_in">size</span>();++ i)&#123;<br>            <span class="hljs-keyword">int</span> t = target - nums[i];<br>            <span class="hljs-keyword">if</span>(m.<span class="hljs-built_in">count</span>(t) &amp;&amp; m[t] != i)&#123;<br>                res.<span class="hljs-built_in">push_back</span>(i);<br>                res.<span class="hljs-built_in">push_back</span>(m[t]);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="题目2-1">题目2</h2><p>题目来源：<a href="https://leetcode.com/problems/4sum-ii/">Leetcode-454. 4Sum II</a></p><p>题目难度：<strong>Medium</strong></p><p>题目描述：Given four lists A, B, C, D of integer values, compute how many tuples <code>(i, j, k, l)</code> there are such that <code>A[i] + B[j] + C[k] + D[l]</code> is zero.</p><p>To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.</p><p>样例：</p><p><strong>Input:</strong> A = [ 1, 2] B = [-2,-1] C = [-1, 2] D = [ 0, 2]</p><p><strong>Output:</strong> 2</p><p><strong>Explanation:</strong> The two tuples are:</p><ol type="1"><li>(0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0</li><li>(1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0</li></ol><p>题目大意：给定四个整型数组A、B、C和D，寻找使得A[i]+B[j]+C[k]+D[l]==0的组合数。</p><h3 id="暴力解法-2">暴力解法</h3><p>四重循环，时间复杂度为O(n^4)，提交必然超时。</p><h3 id="mapunordered_map">map/unordered_map</h3><p>考虑将D放入查找表中，时间复杂度降为O(n^3)</p><p>将C+D放入查找表，时间复杂度降为O(n^2)</p><p>注意：B+C+D都放？那就是O(n^3)了</p><p>这里实际上是对查找表的键值对进行优化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// time: O(n^2)</span><br><span class="hljs-comment">// memory: O(n^2)</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fourSumCount</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; A, vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; B, vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; C, vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; D)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; mpt;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> c: C)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> d : D)<br>                ++ mpt[c + d];<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a: A)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> b: B)<br>                <span class="hljs-keyword">if</span>(mpt.<span class="hljs-built_in">find</span>(<span class="hljs-number">0</span>-a-b)!=mpt.<span class="hljs-built_in">end</span>())<br>                    res += mpt[<span class="hljs-number">0</span> - a - b];<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><hr /><h3 id="相关训练-1">相关训练</h3><p><a href="https://leetcode.com/problems/group-anagrams/">Leetcode-49.Group Anagrams</a></p><p><strong>Facebook</strong>；<strong>Amazon</strong>；<strong>Uber</strong>；<strong>Bloomberg</strong>；<strong>Yelp</strong></p><p>题目难度：<strong>Medium</strong></p><p>Solution-C++(<a href="https://github.com/yangyangu/MyLeetCode">GitHub</a>暂未更新，代码贴在下面)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//加速cin,cout</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">auto</span> _ = [] &#123;<br>    std::ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;();<br><br><span class="hljs-comment">// time: O(nlogs) s为最大字符串长度</span><br><span class="hljs-comment">// memory: O(n)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;string&gt;&gt; <span class="hljs-built_in">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) &#123;<br>        vector&lt;vector&lt;string&gt;&gt; res;<br>        unordered_map&lt;string, <span class="hljs-keyword">int</span>&gt; mpt;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;str: strs)&#123;<br>            string s = str;<br>            <span class="hljs-built_in">sort</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>());<br>            <span class="hljs-keyword">if</span>(!mpt.<span class="hljs-built_in">count</span>(s))&#123;<br>                mpt[s] = res.<span class="hljs-built_in">size</span>();<br>                vector&lt;string&gt; r;<br>                res.<span class="hljs-built_in">push_back</span>(r);<br>            &#125;<br>            res[mpt[s]].<span class="hljs-built_in">push_back</span>(str);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.com/problems/3sum/">Leetcode-15. 3Sum</a></p><p><strong>Facebook</strong>；<strong>Amazon</strong>；<strong>Microsoft</strong>；<strong>Bloomberg</strong>；<strong>Adobe</strong></p><p>题目难度：<strong>Medium</strong></p><p><a href="https://github.com/yangyangu/MyLeetCode/blob/master/015-3sum/3sum.cpp">Solution-C++</a></p><p>Note：存在多解，要找出所有的解。</p><hr /><p><a href="https://leetcode.com/problems/4sum/">Leetcode-18. 4Sum</a></p><p>题目难度：<strong>Medium</strong></p><p><a href="https://github.com/yangyangu/MyLeetCode/blob/master/018-4sum/4sum.cpp">Solution-C++</a></p><hr /><p><a href="https://leetcode.com/problems/3sum-closest/">Leetcode-16. 3Sum Closest</a></p><p><strong>Bloomberg</strong></p><p>题目难度：<strong>Medium</strong></p><p><a href="https://github.com/yangyangu/MyLeetCode/blob/master/016-3sum-closest/3sum-closest.cpp">Solution-C++</a></p><p>Note：因为不是查找特定值，所以可能不需要查找表。</p><h2 id="题目3">题目3</h2><p>题目来源：<a href="https://leetcode.com/problems/number-of-boomerangs/">Leetcode-447. Number of Boomerangs</a></p><p><strong>Google</strong></p><p>题目难度：<strong>Easy</strong></p><p>题目描述：Given <em>n</em> points in the plane that are all pairwise distinct, a "boomerang" is a tuple of points <code>(i, j, k)</code> such that the distance between <code>i</code> and <code>j</code> equals the distance between <code>i</code> and <code>k</code> (<strong>the order of the tuple matters</strong>).</p><p>Find the number of boomerangs. You may assume that <em>n</em> will be at most <strong>500</strong> and coordinates of points are all in the range <strong>[-10000, 10000]</strong> (inclusive).</p><p>样例：</p><p><strong>Input:</strong> [[0,0],[1,0],[2,0]]</p><p><strong>Output:</strong> 2</p><p><strong>Explanation:</strong> The two boomerangs are <strong>[[1,0],[0,0],[2,0]]</strong> and <strong>[[1,0],[2,0],[0,0]]</strong></p><p>题目大意：给出平面上n个点，寻找使得i,j两点距离等于i,k两点距离的三元组(i,j,k)的个数。n最大值为<strong>500</strong>，点坐标范围为<strong>[-10000, 10000]</strong>。</p><h3 id="暴力解法-3">暴力解法</h3><p>三重循环。时间复杂度为O(n^3)。</p><h3 id="unordered_map">unordered_map</h3><p>双重遍历points，计算points[i] 与points[j]之间的距离放入查找表中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// time: O(n^2)</span><br><span class="hljs-comment">// memory: O(n)</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 这里计算“距离“，不进行开方（避免出现浮点数）</span><br>    <span class="hljs-comment">// 计算distance可能会超出int范围</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dis</span><span class="hljs-params">(<span class="hljs-keyword">const</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&amp;pa, <span class="hljs-keyword">const</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&amp;pb)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> (pa.first - pb.first) * (pa.first - pb.first) + (pa.second - pb.second) * (pa.second - pb.second);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">numberOfBoomerangs</span><span class="hljs-params">(vector&lt;pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt;&amp; points)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; points.<span class="hljs-built_in">size</span>(); ++i)&#123;<br>            unordered_map&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; mpt;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; points.<span class="hljs-built_in">size</span>(); ++j)<br>                <span class="hljs-keyword">if</span>(j != i)<br>                    ++ mpt[<span class="hljs-built_in">dis</span>(points[i],points[j])];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it = mpt.<span class="hljs-built_in">begin</span>(); it != mpt.<span class="hljs-built_in">end</span>(); ++it)&#123;<br>                <span class="hljs-keyword">if</span>(it-&gt;second &gt;= <span class="hljs-number">2</span>)<br>                    <span class="hljs-comment">// 选择计数</span><br>                    res += (it-&gt;second) * (it-&gt;second - <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><hr /><h3 id="相关训练-2">相关训练</h3><p><a href="https://leetcode.com/problems/max-points-on-a-line/">Leetcode-149.Max Points on a Line</a></p><p><strong>Linkedin</strong>；<strong>Twitter</strong>；<strong>Apple</strong></p><p>题目难度：<strong>Hard</strong></p><h1 id="滑动窗口">滑动窗口</h1><p>  滑动窗口的核心是维护长度一定的区间（窗口），窗口向前滑动时，只需修改少量信息。通常能将时间复杂度降低至O(n)。</p><h2 id="题目">题目</h2><p>题目来源：<a href="https://leetcode.com/problems/contains-duplicate-ii/">Leetcode-219.Contains Duplicate II</a></p><p><strong>Airbnb</strong>；<strong>Palantir</strong></p><p>题目描述：Given an array of integers and an integer <em>k</em>, find out whether there are two distinct indices <em>i</em> and <em>j</em>in the array such that <strong>nums[i] = nums[j]</strong> and the <strong>absolute</strong> difference between <em>i</em> and <em>j</em> is at most <em>k</em>.</p><p>样例：</p><p><strong>Input:</strong> nums = [1,2,3,1], k = 3 <strong>Output:</strong> true</p><p><strong>Input:</strong> nums = [1,0,1,1], k = 1 <strong>Output:</strong> true</p><p><strong>Input:</strong> nums = [1,2,3,1,2,3], k = 2 <strong>Output:</strong> false</p><p>题目大意：给定数组nums，找到nums[i] == nums[j]，索引i和j的差值不超过k。</p><h3 id="滑动窗口unordered_set">滑动窗口+unordered_set</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// time: O(n)</span><br><span class="hljs-comment">// memory: O(k)</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">containsNearbyDuplicate</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        unordered_set&lt;<span class="hljs-keyword">int</span>&gt; st;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i)&#123;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">find</span>(nums[i]) != st.<span class="hljs-built_in">end</span>())<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            st.<span class="hljs-built_in">insert</span>(nums[i]);<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">size</span>() == k + <span class="hljs-number">1</span>)<br>                st.<span class="hljs-built_in">erase</span>(nums[i - k]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><hr /><h3 id="相关训练-3">相关训练</h3><p><a href="https://leetcode.com/problems/contains-duplicate/">Leetcode-217.Contains Duplicate</a></p><p><strong>Airbnb</strong>；<strong>Palantir</strong>；<strong>Yahoo</strong></p><p>题目难度：<strong>Easy</strong></p><p><a href="https://github.com/yangyangu/MyLeetCode/blob/master/217-contains-duplicate/contains-duplicate.cpp">Solution-C++</a></p><hr /><p><a href="https://leetcode.com/problems/contains-duplicate-iii/">Leetcode-220.Contains Duplicate III</a></p><p><strong>Airbnb</strong>；<strong>Palantir</strong></p><p>题目难度：<strong>Medium</strong></p><p><a href="https://github.com/yangyangu/MyLeetCode/blob/master/220-contains-duplicate-iii/contains-duplicate-iii.cpp">Solution-C++</a></p><p>Note：与219相比，对元素的大小有要求。可以使用set（自动排序）。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>查找</tag>
      
      <tag>二分</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表技巧</title>
    <link href="/2022/03/09/%E9%93%BE%E8%A1%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/03/09/%E9%93%BE%E8%A1%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面">写在前面</h1><p>LeetCode中的简单链表题，简单，但是可以有一些常用的小技巧。</p><h1 id="技巧1创建虚拟头结点">技巧1:创建虚拟头结点</h1><p>LeetCode通常会给出单链表，头节点也会存信息，常常需要对头节点特判，增加了冗余代码。</p><p>这时候可以考虑增加一个虚拟头节点，指向题目给的单链表，然后就不需要特判了。</p><h2 id="题目1">题目1</h2><p>题目来源：<a href="https://leetcode.com/problems/remove-linked-list-elements/">Leetcode-203.Remove Linked List Elements</a></p><p>题目难度：<strong>Easy</strong></p><p>题目描述：Remove all elements from a linked list of integers that have value <strong><em>val</em></strong>.</p><p>样例：</p><p><strong>Input:</strong> 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, <strong><em>val</em></strong> = 6 <strong>Output:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5</p><p>题目大意：给定一个链表，删除值为val的结点。</p><h2 id="解析">解析</h2><p>删除的结点可能是头结点，所以要设立一个虚拟的头结点，然后使用三个指针来遍历链表即可。删除链表结点：前驱结点的next指向后继结点。</p><p>很明显，因为头结点也会被操作，所以此类问题最好设置虚拟的头结点，使得原来的头结点和其他结点一样，都有前驱，不必为头结点特别操作。</p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// time: O(n)</span><br><span class="hljs-comment">// memory: O(1)</span><br><span class="hljs-comment">// 链表结点定义省略</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">removeElements</span><span class="hljs-params">(ListNode* head, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!head) <span class="hljs-keyword">return</span> head;<br>        ListNode* vihead = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>        vihead-&gt;next = head;<br>        ListNode *pre = vihead, *cur = head;<br>        <span class="hljs-keyword">while</span>(cur)&#123;<br>            <span class="hljs-keyword">if</span>(cur-&gt;val == val)&#123;<br>                pre-&gt;next = cur-&gt;next;<br>                cur = pre-&gt;next;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                pre = cur;<br>                cur = cur-&gt;next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> vihead-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="题目2">题目2</h2><p>题目来源：<a href="https://leetcode.com/problems/swap-nodes-in-pairs/">Leetcode-24.Swap Nodes in Pairs</a></p><p><strong>Microsoft</strong>；<strong>Bloomberg</strong>；<strong>Uber</strong></p><p>题目难度：<strong>Medium</strong></p><p>题目描述：Given a linked list, swap every two adjacent nodes and return its head.</p><p>You may <strong>not</strong> modify the values in the list's nodes, only nodes itself may be changed.</p><p>样例：</p><p>Given <code>1-&gt;2-&gt;3-&gt;4</code>, you should return the list as <code>2-&gt;1-&gt;4-&gt;3</code>.</p><h2 id="解析-1">解析</h2><p>类似地，本题也需要创建虚拟头结点。所谓交换结点不过也是一种对链表的基本操作。</p><h2 id="代码-1">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// time: O(n)</span><br><span class="hljs-comment">// memory: O(1)</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">swapPairs</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!head || !head-&gt;next) <span class="hljs-keyword">return</span> head;<br>        ListNode *nhead = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>        nhead-&gt;next = head;<br>        ListNode *p = nhead;<br>        <span class="hljs-keyword">while</span>(p-&gt;next&amp;&amp;p-&gt;next-&gt;next)&#123;<br>            ListNode *n1 = p-&gt;next, *n2 = n1-&gt;next;<br>            ListNode *next = n2-&gt;next;<br>            n2-&gt;next = n1;<br>            n1-&gt;next = next;<br>            p-&gt;next = n2;<br>            p = n1;<br>        &#125;<br>        <span class="hljs-comment">//return nhead-&gt;next;</span><br>        <span class="hljs-comment">// 删除虚拟头结点</span><br>        <span class="hljs-keyword">auto</span> res = nhead-&gt;next;<br>        <span class="hljs-keyword">delete</span> nhead;        <br>        <span class="hljs-comment">// 返回真实头结点</span><br>        <span class="hljs-keyword">return</span> res;    <br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><hr /><p>其实所有的链表题都可以加个虚拟头节点（<del>这个甚至都不能算是技巧了</del>）。</p><h2 id="相关训练">相关训练</h2><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/">Leetcode-82.Remove Duplicates from Sorted List II</a></p><p>题目难度：<strong>Medium</strong></p><p><a href="https://github.com/yangyangu/MyLeetCode/blob/master/082-remove-duplicates-from-sorted-list-ii/remove-duplicates-from-sorted-list-ii.cpp">Solution-C++</a></p><hr /><p><a href="https://leetcode.com/problems/merge-two-sorted-lists/">Leetcode-21.Merge Two Sorted Lists</a></p><p><strong>Amazon</strong>；<strong>Linkedin</strong>；<strong>Microsfot</strong>；<strong>Apple</strong></p><p>题目难度：<strong>Easy</strong></p><p><a href="https://github.com/yangyangu/MyLeetCode/blob/master/021-merge-two-sorted-lists/merge-two-sorted-lists.cpp">Solution-C++</a> <a href="https://github.com/yangyangu/MyLeetCode/blob/master/021-merge-two-sorted-lists/merge-two-sorted-lists.java">Solution-Java</a></p><hr /><p><a href="https://leetcode.com/problems/reverse-nodes-in-k-group/">Leetcode-25.Reverse Nodes in k-Group</a></p><p><strong>Facebook</strong>；<strong>Microsoft</strong></p><p>题目难度：<strong>Hard</strong></p><p><a href="https://github.com/yangyangu/MyLeetCode/blob/master/025-reverse-nodes-in-k-group/reverse-nodes-in-k-group.cpp">Solution-C++</a></p><hr /><p><a href="https://leetcode.com/problems/delete-node-in-a-linked-list/">Leetcode-237.Delete Node in a Linked List</a></p><p><strong>Microsoft</strong>；<strong>Adobe</strong>；<strong>Apple</strong></p><p>题目难度：<strong>Easy</strong></p><p><a href="https://github.com/yangyangu/MyLeetCode/blob/master/237-delete-node-in-a-linked-list/delete-node-in-a-linked-list.cpp">Solution-C++</a></p><hr /><p><a href="https://leetcode.com/problems/insertion-sort-list/">Leetcode-147.Insertion Sort List</a></p><p>题目难度：<strong>Medium</strong></p><p>解法：<a href="https://yangyangu.github.io/2020/01/21/链表中的排序/">「链表中的排序」</a></p><hr /><p><a href="">Leetcode-148.Sort List</a>https://leetcode.com/problems/sort-list/</p><p>题目难度：<strong>Medium</strong></p><p>Notes：归并排序（自底向上）</p><p><a href="https://github.com/yangyangu/MyLeetCode/blob/master/148-sort-list/sort-list.cpp">Solution-C++</a> （此题解用了数组，约等于作弊，不推荐）</p><p><a href="https://yangyangu.github.io/2020/01/21/链表中的排序/">真实解法——「链表中的排序」</a></p><h1 id="技巧2链表双指针">技巧2:链表双指针</h1><p>双指针无论是在数组还是在链表中都是很常用的技巧。</p><h2 id="题目">题目</h2><p>题目来源：<a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/">Leetcode-19.Remove Nth Node From End of List</a></p><p>题目难度：<strong>Medium</strong></p><p>题目描述：Given a linked list, remove the <em>n</em>-th node from the end of list and return its head.</p><p>样例：</p><p>Given linked list: <strong>1-&gt;2-&gt;3-&gt;4-&gt;5</strong>, and <strong><em>n</em> = 2</strong>.</p><p>After removing the second node from the end, the linked list becomes <strong>1-&gt;2-&gt;3-&gt;5</strong>.</p><p>题目大意：给定一个链表，删除倒数第n个结点。</p><p>Note：题目保证n是合法的。注意《剑指offer》中也有此题，但是不保证n的合法性，所以要自行处理。</p><h2 id="两次遍历">两次遍历</h2><p>第一次遍历获取链表长度；第二次遍历删除倒数第n个结点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// time: O(n)</span><br><span class="hljs-comment">// memory: O(1)</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode* head, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!head-&gt;next) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        ListNode *pre = head, *cur = head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) cur = cur-&gt;next;<br>        <span class="hljs-keyword">if</span> (!cur) <span class="hljs-keyword">return</span> head-&gt;next;<br>        <span class="hljs-keyword">while</span> (cur-&gt;next) &#123;<br>            cur = cur-&gt;next;<br>            pre = pre-&gt;next;<br>        &#125;<br>        <span class="hljs-comment">// 删除p的后继</span><br>        <span class="hljs-keyword">auto</span> next = p-&gt;next;<br>        pre-&gt;next = pre-&gt;next-&gt;next;<br>        <span class="hljs-keyword">delete</span> next;<br><br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="使用双指针一次遍历">使用双指针：一次遍历</h2><p>使用两个指针p和q， p指向头结点，同时p和q在链表中的距离为n，那么同时将p和q向后移动直到q到达尾结点，此时p恰好为倒数第n + 1个结点。删除p的后继结点即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// time: O(n)</span><br><span class="hljs-comment">// momory: O(1)</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode* head, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!head || !head-&gt;next) <span class="hljs-keyword">return</span> head;<br>        <span class="hljs-comment">// 使用虚拟头结点</span><br>        ListNode *nhead = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>        nhead-&gt;next = head;<br>        ListNode *p = nhead, *q = nhead;<br>        <span class="hljs-comment">// 使得p和q相距为n</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n + <span class="hljs-number">1</span>; ++i)<br>            q = q-&gt;next;<br>        <span class="hljs-keyword">while</span>(q != <span class="hljs-literal">nullptr</span>)&#123;<br>            p = p-&gt;next;<br>            q = q-&gt;next;<br>        &#125;<br>        <span class="hljs-comment">// 删除p的后继</span><br>        <span class="hljs-keyword">auto</span> next = p-&gt;next;<br>        p-&gt;next = p-&gt;next-&gt;next;<br>        <span class="hljs-keyword">delete</span> next;<br><br>        <span class="hljs-comment">// 删除虚拟头结点并返回头指针</span><br>        <span class="hljs-keyword">auto</span> res = nhead-&gt;next;<br>        <span class="hljs-keyword">delete</span> nhead;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><hr /><h2 id="相关训练-1">相关训练</h2><p><a href="https://leetcode.com/problems/rotate-list/">Leetcode-61.Rotate List</a></p><p>题目难度：<strong>Medium</strong></p><p><a href="https://github.com/yangyangu/MyLeetCode/blob/master/061-rotate-list/rotate-list.cpp">Solution-C++</a></p><hr /><p><a href="https://leetcode.com/problems/reorder-list/">Leetcode-143.Reorder List</a></p><p>题目难度：<strong>Medium</strong></p><p><a href="https://github.com/yangyangu/MyLeetCode/blob/master/143-reorder-list/reorder-list.cpp">Solution-C++</a>(此题解应该重写。思路：链表分成两半，右边一部分reverse)</p><hr /><p><a href="https://leetcode.com/problems/palindrome-linked-list/">Leetcode-234.Palindrome Linked List</a></p><p><strong>Facebook</strong>；<strong>Amazon</strong></p><p>题目难度：<strong>Easy</strong></p><p><a href="https://github.com/yangyangu/MyLeetCode/blob/master/234-palindrome-linked-list/palindrome-linked-list.cpp">Solution-C++</a></p><p>要求：是否可以使用O(1)的空间复杂度解决？</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的博客记录</title>
    <link href="/2022/03/09/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/03/09/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<em>就在刚才，我删掉了之前写的博客。</em><p align="right">——作者</p><p>  2018年初至今，我写了大约52篇文章，大部分都是关于LeetCode题解的。有一些类型的题目我刷了很多，每一题都单独成篇，可惜自己觉得写出来的东西确实没有什么干货，干脆直接删除了。BTW，这是我的<a href="https://leetcode-cn.com/u/yangyangu/">LeetCode</a>。除了题解，我还写了一些大数据、深度学习的文章，但也都是废话。</p><p>  大约在2017年，我开始断断续续学习编程。不可否认的是，教计算思维的大学老师讲得很好，带我入了C语言的门，但是可惜，我写代码还是很艰辛。后来有一个直系学长推荐了LeetCode等众多OJ，以及我自己在很多在线学习的网站学了很长一段时间的算法、数据结构和C++（这些课程的老师好好反思自己的念PPT课堂），这里要特别感谢<a href="https://github.com/liuyubobobo">liuyubobobo</a>老师。当然，这些都是后话了。</p><p>  然后，终于可以顺利地用编程语言描述自己的想法了，写LeetCode自然是越写越顺心，哪怕是碰到Medium以上的题目，也是可以慢慢摸索出来的（<del>实在不行还有题解</del>）。</p><p>  不过，再往后，LeetCode上的题目也越来越不像是面试题了，更像是算法竞赛的水题/中等题。时至今日，甚至出现了让OI退役选手都惊讶的算法题。我理解，随着求职市场内卷化程度剧增，这种情况是不可避免的。</p><p>  当年的博客里，我主要完成以下类型的题目：</p><ul><li>回溯</li><li>双指针</li><li>搜索</li><li>二叉树</li><li>链表</li><li>动态规划</li><li>贪心</li><li>队列</li><li>数学</li><li>排序</li><li>二分</li><li>图</li></ul><p>  当然，这些类型的题，如果能熟练掌握（Bug-free、最优解法、默写），无论是找工作面试还是其他算法考试，都足以应对了。哈哈，我确实还不太能做到<em>熟练掌握</em>。我承认之前写的博客都是在水文字，把题目大意、思路和代码放上去，质量真的不高。讲真，就连我自己也很少去翻之前写的东西。</p><p>  有一说一，之前写的文章，放在简历里还是可以的。虽然没法唬住面试官，但是至少能增加一点对面试者的好感，至少ta会严谨的对待自己的学习，哪怕学的东西很基础。这或许是我写博客的初衷——把博客做成一个长期的简历。</p><p>  未来我的想法是：把文章精简化。譬如说，在刷题的文章里，我希望能过通过一道题来解决一类题，学会这道题背后的算法思想，而不只是Accepted这一道题。在其他类型的文章里，也应该能做到类似的事情。</p><p>  因此，我会把之前删掉的文章整合成质量更高的合集（<del>哈哈不是删除了嘛</del>）。希望能让自己更深入的理解其中的思想。</p><p>  最近刷题的主战场在<a href="https://www.acwing.com/">AcWing</a>，一句话：y总YYDS！目前，我希望学好以下类型的题目：</p><ul><li>基础数据结构模板</li><li>树状数组、线段树、Trie、UnionFind、AC自动机...</li><li>各种类型的DP</li><li>搜索优化</li><li>前缀、差分、位运算</li><li>...</li></ul><p>  大家加油！</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>献给自己</title>
    <link href="/2022/03/09/%E7%8C%AE%E7%BB%99%E8%87%AA%E5%B7%B1/"/>
    <url>/2022/03/09/%E7%8C%AE%E7%BB%99%E8%87%AA%E5%B7%B1/</url>
    
    <content type="html"><![CDATA[<p><em>  很长一段时间，我的生活看似马上就要开始了，真正的生活，但是总是有一些阻碍阻拦着，有些事得先解决，有些工作待完成，时间貌似够用，还有一笔债务要去付清，然后生活就会开始。</em></p><p><em>  最后我终于明白，这些障碍，正是我的生活。</em></p><p align="right">——艾弗里德·德索萨</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
